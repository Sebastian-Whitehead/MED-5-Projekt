placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
boxNumbers
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
tmp_participant
# http://www.sthda.com/english/wiki/impressive-package-for-3d-and-4d-graph-r-software-and-data-visualization
library(plot3D)
matrixSize = 8 # Number of physical "fields" in each dimension
placementPath = "placement2.csv"
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
boxNumbers = list()
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
tmp_participant = subset(tmp_participant, select=-c(Y, W)) # Remove all w-values
boxNumber <- round(tmp_participant$X * matrixSize + tmp_participant$Z)
boxNumbers <- rbind(boxNumbers, boxNumber)
}
boxNumbers
separatedList
test = matrix(unlist(separatedList))
test
###############################################################
# Constant variables
fields = matrixSize * matrixSize # Total amount of "fields"
# Construct matrix/grid
x <- paste0(1:matrixSize) # Make x-axis
y <- paste0(1:matrixSize) # Make y-axis
heatmapData <- expand.grid(X=x, Y=y) # Make grid
0:fields
# Convert data to histogram
placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
tmp_participant
tmp_participant
# http://www.sthda.com/english/wiki/impressive-package-for-3d-and-4d-graph-r-software-and-data-visualization
library(plot3D)
matrixSize = 8 # Number of physical "fields" in each dimension
placementPath = "placement2.csv"
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
boxNumbers = list()
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
tmp_participant = subset(tmp_participant, select=-c(Y, W)) # Remove all w-values
boxNumber <- round(tmp_participant$X * matrixSize + tmp_participant$Z)
boxNumbers <- rbind(boxNumbers, boxNumber)
}
boxNumbers
separatedList
test = matrix(unlist(separatedList))
test
###############################################################
# Constant variables
fields = matrixSize * matrixSize # Total amount of "fields"
# Construct matrix/grid
x <- paste0(1:matrixSize) # Make x-axis
y <- paste0(1:matrixSize) # Make y-axis
heatmapData <- expand.grid(X=x, Y=y) # Make grid
0:fields
# Convert data to histogram
placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
# http://www.sthda.com/english/wiki/impressive-package-for-3d-and-4d-graph-r-software-and-data-visualization
library(plot3D)
matrixSize = 8 # Number of physical "fields" in each dimension
placementPath = "placement2.csv"
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
boxNumbers = list()
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
#tmp_participant = subset(tmp_participant, select=-c(Y, W)) # Remove all w-values
boxNumber <- round(tmp_participant$X * matrixSize + tmp_participant$Z)
boxNumbers <- rbind(boxNumbers, boxNumber)
}
boxNumbers
separatedList
test = matrix(unlist(separatedList))
test
###############################################################
# Constant variables
fields = matrixSize * matrixSize # Total amount of "fields"
# Construct matrix/grid
x <- paste0(1:matrixSize) # Make x-axis
y <- paste0(1:matrixSize) # Make y-axis
heatmapData <- expand.grid(X=x, Y=y) # Make grid
0:fields
# Convert data to histogram
placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
tmp_participant
# http://www.sthda.com/english/wiki/impressive-package-for-3d-and-4d-graph-r-software-and-data-visualization
library(plot3D)
matrixSize = 8 # Number of physical "fields" in each dimension
placementPath = "placement2.csv"
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
boxNumbers = list()
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
boxNumber <- round(tmp_participant$X * matrixSize + tmp_participant$Z)
boxNumbers <- rbind(boxNumbers, boxNumber)
}
boxNumbers
separatedList
test = matrix(unlist(separatedList))
test
###############################################################
# Constant variables
fields = matrixSize * matrixSize # Total amount of "fields"
# Construct matrix/grid
x <- paste0(1:matrixSize) # Make x-axis
y <- paste0(1:matrixSize) # Make y-axis
heatmapData <- expand.grid(X=x, Y=y) # Make grid
0:fields
# Convert data to histogram
placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
tmp_participant
boxNumbers
0:fields
# http://www.sthda.com/english/wiki/impressive-package-for-3d-and-4d-graph-r-software-and-data-visualization
library(plot3D)
matrixSize = 8 # Number of physical "fields" in each dimension
placementPath = "placement2.csv"
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
boxNumbers = list()
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
boxNumber <- round((tmp_participant$X / 100) * matrixSize + tmp_participant$Z)
boxNumbers <- rbind(boxNumbers, boxNumber)
}
boxNumbers
separatedList
test = matrix(unlist(separatedList))
test
###############################################################
# Constant variables
fields = matrixSize * matrixSize # Total amount of "fields"
# Construct matrix/grid
x <- paste0(1:matrixSize) # Make x-axis
y <- paste0(1:matrixSize) # Make y-axis
heatmapData <- expand.grid(X=x, Y=y) # Make grid
0:fields
# Convert data to histogram
placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
tmp_participant
boxNumbers
# http://www.sthda.com/english/wiki/impressive-package-for-3d-and-4d-graph-r-software-and-data-visualization
library(plot3D)
matrixSize = 80 # Number of physical "fields" in each dimension
placementPath = "placement2.csv"
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
boxNumbers = list()
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
boxNumber <- round(tmp_participant$X * matrixSize + tmp_participant$Z)
boxNumbers <- rbind(boxNumbers, boxNumber)
}
boxNumbers
separatedList
test = matrix(unlist(separatedList))
test
###############################################################
# Constant variables
fields = matrixSize * matrixSize # Total amount of "fields"
# Construct matrix/grid
x <- paste0(1:matrixSize) # Make x-axis
y <- paste0(1:matrixSize) # Make y-axis
heatmapData <- expand.grid(X=x, Y=y) # Make grid
0:fields
# Convert data to histogram
placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
# http://www.sthda.com/english/wiki/impressive-package-for-3d-and-4d-graph-r-software-and-data-visualization
library(plot3D)
matrixSize = 20 # Number of physical "fields" in each dimension
placementPath = "placement2.csv"
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
boxNumbers = list()
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
boxNumber <- round(tmp_participant$X * matrixSize + tmp_participant$Z)
boxNumbers <- rbind(boxNumbers, boxNumber)
}
###############################################################
# Constant variables
fields = matrixSize * matrixSize # Total amount of "fields"
# Construct matrix/grid
x <- paste0(1:matrixSize) # Make x-axis
y <- paste0(1:matrixSize) # Make y-axis
heatmapData <- expand.grid(X=x, Y=y) # Make grid
0:fields
# Convert data to histogram
placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
# http://www.sthda.com/english/wiki/impressive-package-for-3d-and-4d-graph-r-software-and-data-visualization
library(plot3D)
matrixSize = 20 # Number of physical "fields" in each dimension
placementPath = "placement2.csv"
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
boxNumbers = list()
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
boxNumber <- round(tmp_participant$X * matrixSize + tmp_participant$Z)
boxNumbers <- rbind(boxNumbers, boxNumber)
}
###############################################################
# Constant variables
fields = matrixSize * matrixSize # Total amount of "fields"
# Construct matrix/grid
x <- paste0(1:matrixSize) # Make x-axis
y <- paste0(1:matrixSize) # Make y-axis
heatmapData <- expand.grid(X=x, Y=y) # Make grid
# Convert data to histogram
placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
boxNumbers
# http://www.sthda.com/english/wiki/impressive-package-for-3d-and-4d-graph-r-software-and-data-visualization
library(plot3D)
matrixSize = 25 # Number of physical "fields" in each dimension
placementPath = "placement2.csv"
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
boxNumbers = list()
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
boxNumber <- round(tmp_participant$X * matrixSize + tmp_participant$Z)
boxNumbers <- rbind(boxNumbers, boxNumber)
}
###############################################################
# Constant variables
fields = matrixSize * matrixSize # Total amount of "fields"
# Construct matrix/grid
x <- paste0(1:matrixSize) # Make x-axis
y <- paste0(1:matrixSize) # Make y-axis
heatmapData <- expand.grid(X=x, Y=y) # Make grid
# Convert data to histogram
placeList <- unlist(as.list(boxNumbers)) # Flatten placement matrix
placeHist <- hist(placeList, breaks=0:fields) # Get histogram of "placement"
placeValues <- placeHist$counts # Get counts in histogram
placeValues = (placeValues-min(placeValues))/(max(placeValues)-min(placeValues))
placeValues = placeValues * 10
x = seq(-matrixSize/2+1, matrixSize/2, by=1)
y = seq(matrixSize/2, -matrixSize/2+1, by=-1)
# Convert Z values into a matrix.
z = matrix(placeValues, nrow=matrixSize, ncol=matrixSize, byrow=TRUE)
hist3D(
x, y, z,
main="Placement representation each frame",
clab=c("Frame count", "Normalized"),
colkey=list(side=4, length=0.5, width=0.5),
theta=-45, phi=30, bty="b2",
col = c("#0AE4F0", "#0253F2", "#4409DB","#E20CF5", "#EB0A09"),
axes=TRUE, label=FALSE, ticktype="detailed",
nticks=matrixSize, space=0.2,
lighting=TRUE, shade=0.9)
# https://www.geeksforgeeks.org/how-to-convert-csv-into-array-in-r/
# tmp_participant = subset(tmp_participant, select=-c(w)) # Remove all w-values
# TODO:
# - Change label names in legend
# - Normalize data
# - Set width and height to 1,1
# Importing libraries
library(ggplot2)
library(data.table)
source("convertInput.R")
# Static variables
placementPath = "placement.csv" # CSV-path for location data
rowLength = 4 # Amount of columns
surveyPath = "survey.csv" # CSV-path for survey data
guardians = c("Meta", "Perma") # Guardian names
########## Get survey data ##########
surveyData <- read.csv(surveyPath, header=FALSE) # Read data from file
surveyData <- t(surveyData) # Transpose data
surveyMean = colMeans(surveyData) # Mean columns
########## Get placement data ##########
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
separatedList = list() # Initialize empty list for separated matrices
meanLocation = strtoi(list()) # Initizlize empty list for mean matrix
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=rowLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant)
# Calculate the C-value for each row
tmp_participant = transform(
tmp_participant, # Chose participant
C=(sqrt(X*X + Z*Z) * W)) # Calculate C-value
# Normalize each C-value depending on participant
minC = min(tmp_participant$C) # Get minimum value of C
maxC = max(tmp_participant$C) # Get maxmimum value of C
tmp_participant$C = t((tmp_participant$C - minC) / (maxC - minC))
# Append C-mean and survey mean into a matrix
meanLocation <- rbind(
meanLocation,
c(round(mean(data.table(tmp_participant)$C), 10), # C-mean
round(surveyMean[i], 2), # Survey mean
i %% 2 + 1 # Un-/even participant
))
separatedList[[i]] <- data.table(tmp_participant) # Convert to data frame
}
colnames(meanLocation) <- c("Movement", "Immersion", "Guardian") # Column names
meanLocation <- data.frame(meanLocation)
meanLocation$Guardian <- as.factor(meanLocation$Guardian) # Integar Guardian-value
########## Show data ##########
ggplot(
data=meanLocation,
aes(x=Movement, y=Immersion, color=Guardian)) +
geom_point(size=5) +
theme(legend.position="top",
legend.text=element_text(
size=13),
legend.background=element_rect(
size=0.5, linetype="solid",
color ="grey")) +
ylim(0, 7)
# labs(title = "#######",
#      subtitle = "#######",
#      caption = "#######")
########## Print data ##########
# separatedList
# separatedList[1]
# data.frame(separatedList[1])$W
# mean(data.frame(separatedList[1])$W) # Get mean of all w-values in one participant
