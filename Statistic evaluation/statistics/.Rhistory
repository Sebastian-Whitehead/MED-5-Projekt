size=0.5, linetype="solid",
color="grey"))
plot
ggsave(plot, height=10, width=10, filename="IOM.png") # Save graph as PNG
# https://www.geeksforgeeks.org/how-to-convert-csv-into-array-in-r/
# tmp_participant = subset(tmp_participant, select=-c(w)) # Remove all w-values
# TODO:
# - Normalize data
# Importing libraries
library(ggplot2)
library(data.table)
library(data.frame)
# Static variables
placementPath = "locationAnswers.csv" # CSV-path for location data
locDataLength = 4 # Amount of columns
surveyPath = "surveyAnswers.csv" # CSV-path for survey data
surveryQuestions = 8 # Amount of questions in the survey
guardians = c("Perma", "Meta") # Guardian names
########## Get survey data ##########
surveyData <- read.csv(surveyPath, header=FALSE) # Read data from file
surveyData <- t(surveyData) # Transpose data
surveyData <- surveyData[c(-1,-2,-3,-12,-13,-22,-23,-24),] # Remove questions from survey
# Separate survey questions
meanSurvey = strtoi(list()) # Initialize empty list for mean matrix
for (i in 1:ncol(surveyData)) {
tmp_participant <- matrix(unlist(surveyData[ , i]), nrow=surveryQuestions) # Cut to matrix
tmp_surveyMean = colMeans(tmp_participant) # Get mean of survey
meanSurvey <- rbind(meanSurvey, tmp_surveyMean) # Append data to list
}
########## Get placement data ##########
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
separatedList = list() # Initialize empty list for separated matrices
IOM = strtoi(list()) # Initizlize empty list for mean matrix
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=locDataLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant) # Convert to data.table
tmp_participant <- na.omit(tmp_participant) # Remove NaN data values
# Calculate the C-value for each row
tmp_participant = transform(
tmp_participant, # Chose participant
C=(sqrt(X*X + Z*Z) * W)) # Calculate C-value
# Normalize each C-value depending on participant
minC = min(tmp_participant$C) # Get minimum value of C
maxC = max(tmp_participant$C) # Get maximum value of C
tmp_participant$C = t((tmp_participant$C - minC) / (maxC - minC)) # Normalize
# Pack data for each participant
tmp_guardianId = i %% 2 + 1 # Un-/even participant
tmp_locationCMean = round(mean(data.table(tmp_participant)$C), 3) # C location mean
tmp_surveyMean = round(meanSurvey[i], 3) # Survey mean
trail = c(tmp_locationCMean, tmp_surveyMean, tmp_guardianId, 1) # Construct package
# Append C-mean and survey mean into a matrix
IOM <- rbind(IOM, trail) # Append data package
separatedList[[i]] <- data.table(tmp_participant) # Convert to data frame
}
colnames(IOM) <- c("Movement", "Immersion", "Guardian", "Type") # Column names
IOM <- data.frame(IOM) # Convert to data.frame
# Get mean of each guardian Shape
for (i in 1:length(guardians)) {
guardianData = subset(IOM, Guardian==i, select=c(Movement, Immersion))
guardianMean = colMeans(guardianData)
IOM <- rbind(IOM, c(guardianMean, i, 2)) # Append data package
}
# Factor types
IOM$Guardian <- as.factor(IOM$Guardian) # Integer Guardian-value
IOM$Type <- as.factor(IOM$Type) # Integer Guardian-value
########## Show data ##########
# http://www.sthda.com/english/wiki/ggplot2-point-shapes
plot <- ggplot(
data=IOM, aes(x=Movement, y=Immersion)) +
geom_point(aes(shape=Type, color=Guardian), size=5) +
scale_color_manual(values=c('#D0312D','#1AA7EC'), labels=guardians) +
scale_shape_manual(values=c(16, 4), labels=c("Data", "Mean")) +
scale_y_continuous(
breaks=seq(0, 7, by=1),
limits=c(1, 7)) +
scale_x_continuous(
breaks=seq(0, 1, by=.1),
limits=c(0, 1)) +
theme(legend.position="top",
legend.text=element_text(size=12),
legend.background=element_rect(
size=0.5, linetype="solid",
color="grey"))
plot
ggsave(plot, height=10, width=10, filename="IOM.png") # Save graph as PNG
# https://www.geeksforgeeks.org/how-to-convert-csv-into-array-in-r/
# tmp_participant = subset(tmp_participant, select=-c(w)) # Remove all w-values
# TODO:
# - Normalize data
# Importing libraries
library(ggplot2)
library(data.table)
library(data.frame)
# Static variables
placementPath = "locationAnswers.csv" # CSV-path for location data
locDataLength = 4 # Amount of columns
surveyPath = "surveyAnswers.csv" # CSV-path for survey data
surveryQuestions = 8 # Amount of questions in the survey
guardians = c("Perma", "Meta") # Guardian names
########## Get survey data ##########
surveyData <- read.csv(surveyPath, header=FALSE) # Read data from file
surveyData <- t(surveyData) # Transpose data
surveyData <- surveyData[c(-1,-2,-3,-12,-13,-22,-23,-24),] # Remove questions from survey
# Separate survey questions
meanSurvey = strtoi(list()) # Initialize empty list for mean matrix
for (i in 1:ncol(surveyData)) {
tmp_participant <- matrix(unlist(surveyData[ , i]), nrow=surveryQuestions) # Cut to matrix
tmp_surveyMean = colMeans(tmp_participant) # Get mean of survey
meanSurvey <- rbind(meanSurvey, tmp_surveyMean) # Append data to list
}
########## Get placement data ##########
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
separatedList = list() # Initialize empty list for separated matrices
IOM = strtoi(list()) # Initizlize empty list for mean matrix
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=locDataLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant) # Convert to data.table
tmp_participant <- na.omit(tmp_participant) # Remove NaN data values
# Calculate the C-value for each row
tmp_participant = transform(
tmp_participant, # Chose participant
C=(sqrt(X*X + Z*Z) * W)) # Calculate C-value
# Normalize each C-value depending on participant
minC = min(tmp_participant$C) # Get minimum value of C
maxC = max(tmp_participant$C) # Get maximum value of C
tmp_participant$C = t((tmp_participant$C - minC) / (maxC - minC)) # Normalize
# Pack data for each participant
tmp_guardianId = i %% 2 + 1 # Un-/even participant
tmp_locationCMean = round(mean(data.table(tmp_participant)$C), 3) # C location mean
tmp_surveyMean = round(meanSurvey[i], 3) # Survey mean
trail = c(tmp_locationCMean, tmp_surveyMean, tmp_guardianId, 1) # Construct package
# Append C-mean and survey mean into a matrix
IOM <- rbind(IOM, trail) # Append data package
separatedList[[i]] <- data.table(tmp_participant) # Convert to data frame
}
colnames(IOM) <- c("Movement", "Immersion", "Guardian", "Type") # Column names
IOM <- data.frame(IOM) # Convert to data.frame
# Get mean of each guardian Shape
for (i in 1:length(guardians)) {
guardianData = subset(IOM, Guardian==i, select=c(Movement, Immersion))
guardianMean = colMeans(guardianData)
IOM <- rbind(IOM, c(guardianMean, i, 2)) # Append data package
}
# Factor types
IOM$Guardian <- as.factor(IOM$Guardian) # Integer Guardian-value
IOM$Type <- as.factor(IOM$Type) # Integer Guardian-value
########## Show data ##########
# http://www.sthda.com/english/wiki/ggplot2-point-shapes
plot <- ggplot(
data=IOM, aes(x=Movement, y=Immersion)) +
geom_point(aes(shape=Type, color=Guardian), size=5) +
scale_color_manual(values=c('#D0312D','#1AA7EC'), labels=guardians) +
scale_shape_manual(values=c(16, 4), labels=c("Data", "Mean")) +
scale_y_continuous(
breaks=seq(0, 7, by=1),
limits=c(1, 7)) +
scale_x_continuous(
breaks=seq(0, 1, by=.1),
limits=c(0, 1)) +
theme(legend.position="top", face="bold",
legend.text=element_text(size=12),
legend.background=element_rect(
size=0.5, linetype="solid",
color="grey"))
plot
ggsave(plot, height=10, width=10, filename="IOM.png") # Save graph as PNG
# https://www.geeksforgeeks.org/how-to-convert-csv-into-array-in-r/
# tmp_participant = subset(tmp_participant, select=-c(w)) # Remove all w-values
# TODO:
# - Normalize data
# Importing libraries
library(ggplot2)
library(data.table)
library(data.frame)
# Static variables
placementPath = "locationAnswers.csv" # CSV-path for location data
locDataLength = 4 # Amount of columns
surveyPath = "surveyAnswers.csv" # CSV-path for survey data
surveryQuestions = 8 # Amount of questions in the survey
guardians = c("Perma", "Meta") # Guardian names
########## Get survey data ##########
surveyData <- read.csv(surveyPath, header=FALSE) # Read data from file
surveyData <- t(surveyData) # Transpose data
surveyData <- surveyData[c(-1,-2,-3,-12,-13,-22,-23,-24),] # Remove questions from survey
# Separate survey questions
meanSurvey = strtoi(list()) # Initialize empty list for mean matrix
for (i in 1:ncol(surveyData)) {
tmp_participant <- matrix(unlist(surveyData[ , i]), nrow=surveryQuestions) # Cut to matrix
tmp_surveyMean = colMeans(tmp_participant) # Get mean of survey
meanSurvey <- rbind(meanSurvey, tmp_surveyMean) # Append data to list
}
########## Get placement data ##########
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
separatedList = list() # Initialize empty list for separated matrices
IOM = strtoi(list()) # Initizlize empty list for mean matrix
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=locDataLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant) # Convert to data.table
tmp_participant <- na.omit(tmp_participant) # Remove NaN data values
# Calculate the C-value for each row
tmp_participant = transform(
tmp_participant, # Chose participant
C=(sqrt(X*X + Z*Z) * W)) # Calculate C-value
# Normalize each C-value depending on participant
minC = min(tmp_participant$C) # Get minimum value of C
maxC = max(tmp_participant$C) # Get maximum value of C
tmp_participant$C = t((tmp_participant$C - minC) / (maxC - minC)) # Normalize
# Pack data for each participant
tmp_guardianId = i %% 2 + 1 # Un-/even participant
tmp_locationCMean = round(mean(data.table(tmp_participant)$C), 3) # C location mean
tmp_surveyMean = round(meanSurvey[i], 3) # Survey mean
trail = c(tmp_locationCMean, tmp_surveyMean, tmp_guardianId, 1) # Construct package
# Append C-mean and survey mean into a matrix
IOM <- rbind(IOM, trail) # Append data package
separatedList[[i]] <- data.table(tmp_participant) # Convert to data frame
}
colnames(IOM) <- c("Movement", "Immersion", "Guardian", "Type") # Column names
IOM <- data.frame(IOM) # Convert to data.frame
# Get mean of each guardian Shape
for (i in 1:length(guardians)) {
guardianData = subset(IOM, Guardian==i, select=c(Movement, Immersion))
guardianMean = colMeans(guardianData)
IOM <- rbind(IOM, c(guardianMean, i, 2)) # Append data package
}
# Factor types
IOM$Guardian <- as.factor(IOM$Guardian) # Integer Guardian-value
IOM$Type <- as.factor(IOM$Type) # Integer Guardian-value
########## Show data ##########
# http://www.sthda.com/english/wiki/ggplot2-point-shapes
plot <- ggplot(
data=IOM, aes(x=Movement, y=Immersion)) +
geom_point(aes(shape=Type, color=Guardian), size=5) +
scale_color_manual(values=c('#D0312D','#1AA7EC'), labels=guardians) +
scale_shape_manual(values=c(16, 4), labels=c("Data", "Mean")) +
scale_y_continuous(
breaks=seq(0, 7, by=1),
limits=c(1, 7)) +
scale_x_continuous(
breaks=seq(0, 1, by=.1),
limits=c(0, 1)) +
theme(legend.position="top", face="bold",
legend.text=element_text(size=12),
legend.background=element_rect(
size=0.5, linetype="solid",
color="grey"))
plot
ggsave(plot, height=10, width=10, filename="IOM.png") # Save graph as PNG
# https://www.geeksforgeeks.org/how-to-convert-csv-into-array-in-r/
# tmp_participant = subset(tmp_participant, select=-c(w)) # Remove all w-values
# TODO:
# - Normalize data
# Importing libraries
library(ggplot2)
library(data.table)
library(data.frame)
# Static variables
placementPath = "locationAnswers.csv" # CSV-path for location data
locDataLength = 4 # Amount of columns
surveyPath = "surveyAnswers.csv" # CSV-path for survey data
surveryQuestions = 8 # Amount of questions in the survey
guardians = c("Perma", "Meta") # Guardian names
########## Get survey data ##########
surveyData <- read.csv(surveyPath, header=FALSE) # Read data from file
surveyData <- t(surveyData) # Transpose data
surveyData <- surveyData[c(-1,-2,-3,-12,-13,-22,-23,-24),] # Remove questions from survey
# Separate survey questions
meanSurvey = strtoi(list()) # Initialize empty list for mean matrix
for (i in 1:ncol(surveyData)) {
tmp_participant <- matrix(unlist(surveyData[ , i]), nrow=surveryQuestions) # Cut to matrix
tmp_surveyMean = colMeans(tmp_participant) # Get mean of survey
meanSurvey <- rbind(meanSurvey, tmp_surveyMean) # Append data to list
}
########## Get placement data ##########
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
separatedList = list() # Initialize empty list for separated matrices
IOM = strtoi(list()) # Initizlize empty list for mean matrix
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=locDataLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant) # Convert to data.table
tmp_participant <- na.omit(tmp_participant) # Remove NaN data values
# Calculate the C-value for each row
tmp_participant = transform(
tmp_participant, # Chose participant
C=(sqrt(X*X + Z*Z) * W)) # Calculate C-value
# Normalize each C-value depending on participant
minC = min(tmp_participant$C) # Get minimum value of C
maxC = max(tmp_participant$C) # Get maximum value of C
tmp_participant$C = t((tmp_participant$C - minC) / (maxC - minC)) # Normalize
# Pack data for each participant
tmp_guardianId = i %% 2 + 1 # Un-/even participant
tmp_locationCMean = round(mean(data.table(tmp_participant)$C), 3) # C location mean
tmp_surveyMean = round(meanSurvey[i], 3) # Survey mean
trail = c(tmp_locationCMean, tmp_surveyMean, tmp_guardianId, 1) # Construct package
# Append C-mean and survey mean into a matrix
IOM <- rbind(IOM, trail) # Append data package
separatedList[[i]] <- data.table(tmp_participant) # Convert to data frame
}
colnames(IOM) <- c("Movement", "Immersion", "Guardian", "Type") # Column names
IOM <- data.frame(IOM) # Convert to data.frame
# Get mean of each guardian Shape
for (i in 1:length(guardians)) {
guardianData = subset(IOM, Guardian==i, select=c(Movement, Immersion))
guardianMean = colMeans(guardianData)
IOM <- rbind(IOM, c(guardianMean, i, 2)) # Append data package
}
# Factor types
IOM$Guardian <- as.factor(IOM$Guardian) # Integer Guardian-value
IOM$Type <- as.factor(IOM$Type) # Integer Guardian-value
########## Show data ##########
# http://www.sthda.com/english/wiki/ggplot2-point-shapes
plot <- ggplot(
data=IOM, aes(x=Movement, y=Immersion)) +
geom_point(aes(shape=Type, color=Guardian), size=5) +
scale_color_manual(values=c('#D0312D','#1AA7EC'), labels=guardians) +
scale_shape_manual(values=c(16, 4), labels=c("Data", "Mean")) +
scale_y_continuous(
breaks=seq(0, 7, by=1),
limits=c(1, 7)) +
scale_x_continuous(
breaks=seq(0, 1, by=.1),
limits=c(0, 1)) +
theme(legend.position="top",
legend.text=element_text( face="bold",size=12),
legend.background=element_rect(
size=0.5, linetype="solid",
color="grey"))
plot
ggsave(plot, height=10, width=10, filename="IOM.png") # Save graph as PNG
# https://www.geeksforgeeks.org/how-to-convert-csv-into-array-in-r/
# tmp_participant = subset(tmp_participant, select=-c(w)) # Remove all w-values
# TODO:
# - Normalize data
# Importing libraries
library(ggplot2)
library(data.table)
library(data.frame)
# Static variables
placementPath = "locationAnswers.csv" # CSV-path for location data
locDataLength = 4 # Amount of columns
surveyPath = "surveyAnswers.csv" # CSV-path for survey data
surveryQuestions = 8 # Amount of questions in the survey
guardians = c("Perma", "Meta") # Guardian names
########## Get survey data ##########
surveyData <- read.csv(surveyPath, header=FALSE) # Read data from file
surveyData <- t(surveyData) # Transpose data
surveyData <- surveyData[c(-1,-2,-3,-12,-13,-22,-23,-24),] # Remove questions from survey
# Separate survey questions
meanSurvey = strtoi(list()) # Initialize empty list for mean matrix
for (i in 1:ncol(surveyData)) {
tmp_participant <- matrix(unlist(surveyData[ , i]), nrow=surveryQuestions) # Cut to matrix
tmp_surveyMean = colMeans(tmp_participant) # Get mean of survey
meanSurvey <- rbind(meanSurvey, tmp_surveyMean) # Append data to list
}
########## Get placement data ##########
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
separatedList = list() # Initialize empty list for separated matrices
IOM = strtoi(list()) # Initizlize empty list for mean matrix
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=locDataLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant) # Convert to data.table
tmp_participant <- na.omit(tmp_participant) # Remove NaN data values
# Calculate the C-value for each row
tmp_participant = transform(
tmp_participant, # Chose participant
C=(sqrt(X*X + Z*Z) * W)) # Calculate C-value
# Normalize each C-value depending on participant
minC = min(tmp_participant$C) # Get minimum value of C
maxC = max(tmp_participant$C) # Get maximum value of C
tmp_participant$C = t((tmp_participant$C - minC) / (maxC - minC)) # Normalize
# Pack data for each participant
tmp_guardianId = i %% 2 + 1 # Un-/even participant
tmp_locationCMean = round(mean(data.table(tmp_participant)$C), 3) # C location mean
tmp_surveyMean = round(meanSurvey[i], 3) # Survey mean
trail = c(tmp_locationCMean, tmp_surveyMean, tmp_guardianId, 1) # Construct package
# Append C-mean and survey mean into a matrix
IOM <- rbind(IOM, trail) # Append data package
separatedList[[i]] <- data.table(tmp_participant) # Convert to data frame
}
colnames(IOM) <- c("Movement", "Immersion", "Guardian", "Type") # Column names
IOM <- data.frame(IOM) # Convert to data.frame
# Get mean of each guardian Shape
for (i in 1:length(guardians)) {
guardianData = subset(IOM, Guardian==i, select=c(Movement, Immersion))
guardianMean = colMeans(guardianData)
IOM <- rbind(IOM, c(guardianMean, i, 2)) # Append data package
}
# Factor types
IOM$Guardian <- as.factor(IOM$Guardian) # Integer Guardian-value
IOM$Type <- as.factor(IOM$Type) # Integer Guardian-value
########## Show data ##########
# http://www.sthda.com/english/wiki/ggplot2-point-shapes
plot <- ggplot(
data=IOM, aes(x=Movement, y=Immersion)) +
geom_point(aes(shape=Type, color=Guardian), size=5) +
scale_color_manual(values=c('#D0312D','#1AA7EC'), labels=guardians) +
scale_shape_manual(values=c(16, 4), labels=c("Data", "Mean")) +
scale_y_continuous(
breaks=seq(0, 7, by=1),
limits=c(1, 7)) +
scale_x_continuous(
breaks=seq(0, 1, by=.1),
limits=c(0, 1)) +
theme(legend.position="top",
legend.text=element_text(face="bold", size=12),
legend.background=element_rect(
size=0.5, linetype="solid",
color="grey"))
plot
ggsave(plot, height=10, width=10, filename="IOM.png") # Save graph as PNG
# https://www.geeksforgeeks.org/how-to-convert-csv-into-array-in-r/
# tmp_participant = subset(tmp_participant, select=-c(w)) # Remove all w-values
# TODO:
# - Normalize data
# Importing libraries
library(ggplot2)
library(data.table)
library(data.frame)
# Static variables
placementPath = "locationAnswers.csv" # CSV-path for location data
locDataLength = 4 # Amount of columns
surveyPath = "surveyAnswers.csv" # CSV-path for survey data
surveryQuestions = 8 # Amount of questions in the survey
guardians = c("Perma", "Meta") # Guardian names
########## Get survey data ##########
surveyData <- read.csv(surveyPath, header=FALSE) # Read data from file
surveyData <- t(surveyData) # Transpose data
surveyData <- surveyData[c(-1,-2,-3,-12,-13,-22,-23,-24),] # Remove questions from survey
# Separate survey questions
meanSurvey = strtoi(list()) # Initialize empty list for mean matrix
for (i in 1:ncol(surveyData)) {
tmp_participant <- matrix(unlist(surveyData[ , i]), nrow=surveryQuestions) # Cut to matrix
tmp_surveyMean = colMeans(tmp_participant) # Get mean of survey
meanSurvey <- rbind(meanSurvey, tmp_surveyMean) # Append data to list
}
########## Get placement data ##########
placeData <- read.csv(placementPath, header=FALSE) # Read data from file
placeData <- t(placeData) # Transpose data
separatedList = list() # Initialize empty list for separated matrices
IOM = strtoi(list()) # Initizlize empty list for mean matrix
for (i in 1:ncol(placeData)) {
tmp_participant <- matrix(unlist(placeData[ , i]), nrow=locDataLength) # Cut to matrix
rownames(tmp_participant) <- c("X", "Y", "Z", "W") # Column names
tmp_participant <- t(tmp_participant) # Transpose
tmp_participant <- data.table(tmp_participant) # Convert to data.table
tmp_participant <- na.omit(tmp_participant) # Remove NaN data values
# Calculate the C-value for each row
tmp_participant = transform(
tmp_participant, # Chose participant
C=(sqrt(X*X + Z*Z) * W)) # Calculate C-value
# Normalize each C-value depending on participant
minC = min(tmp_participant$C) # Get minimum value of C
maxC = max(tmp_participant$C) # Get maximum value of C
tmp_participant$C = t((tmp_participant$C - minC) / (maxC - minC)) # Normalize
# Pack data for each participant
tmp_guardianId = i %% 2 + 1 # Un-/even participant
tmp_locationCMean = round(mean(data.table(tmp_participant)$C), 3) # C location mean
tmp_surveyMean = round(meanSurvey[i], 3) # Survey mean
trail = c(tmp_locationCMean, tmp_surveyMean, tmp_guardianId, 1) # Construct package
# Append C-mean and survey mean into a matrix
IOM <- rbind(IOM, trail) # Append data package
separatedList[[i]] <- data.table(tmp_participant) # Convert to data frame
}
colnames(IOM) <- c("Movement", "Immersion", "Guardian", "Type") # Column names
IOM <- data.frame(IOM) # Convert to data.frame
# Get mean of each guardian Shape
for (i in 1:length(guardians)) {
guardianData = subset(IOM, Guardian==i, select=c(Movement, Immersion))
guardianMean = colMeans(guardianData)
IOM <- rbind(IOM, c(guardianMean, i, 2)) # Append data package
}
# Factor types
IOM$Guardian <- as.factor(IOM$Guardian) # Integer Guardian-value
IOM$Type <- as.factor(IOM$Type) # Integer Guardian-value
########## Show data ##########
# http://www.sthda.com/english/wiki/ggplot2-point-shapes
plot <- ggplot(
data=IOM, aes(x=Movement, y=Immersion)) +
geom_point(aes(shape=Type, color=Guardian), size=5) +
scale_color_manual(
values=c('#D0312D','#1AA7EC'),
labels=guardians) +
scale_shape_manual(
values=c(16, 4),
labels=c("Data", "Mean")) +
scale_y_continuous(
breaks=seq(0, 7, by=1),
limits=c(1, 7)) +
scale_x_continuous(
breaks=seq(0, 1, by=.1),
limits=c(0, 1)) +
theme(legend.position="top",
legend.text=element_text(size=12),
legend.background=element_rect(
size=0.5, linetype="solid",
color="grey"))
plot
ggsave(plot, height=10, width=10, filename="IOM.png") # Save graph as PNG
