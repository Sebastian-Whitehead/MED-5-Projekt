ggplot(data=boxData) + ggtitle("Confidence over immersion box-plot") +
xlab("Confidence [μ(|x,y| * w])") + ylab("Immersion [μ]") +
scale_x_continuous(
breaks = seq(.1, .6, by = .05),
limits = c(.1, .6)) +
scale_y_continuous(
breaks = seq(1, 7, by = 1),
limits = c(1, 7)) +
# 2D box defined by the Q1 & Q3 values in each dimension, with outline
geom_rect(aes(
xmin = x.lower, xmax = x.upper,
ymin = y.lower, ymax = y.upper,
fill = factor(Guardian)), color = "black", alpha = .5) +
# Whiskers for x-axis dimension with ends
geom_segment(aes(x = x.min, y = y.middle, xend = x.max, yend = y.middle, color = factor(Guardian))) + # whiskers
geom_segment(aes(x = x.min, y = y.lower, xend = x.min, yend = y.upper, color = factor(Guardian))) + # lower end
geom_segment(aes(x = x.max, y = y.lower, xend = x.max, yend = y.upper, color = factor(Guardian))) + # upper end
# Whiskers for y-axis dimension with ends
geom_segment(aes(x = x.middle, y = y.min, xend = x.middle, yend = y.max, color = factor(Guardian))) + # whiskers
geom_segment(aes(x = x.lower, y = y.min, xend = x.upper, yend = y.min, color = factor(Guardian))) + # lower end
geom_segment(aes(x = x.lower, y = y.max, xend = x.upper, yend = y.max, color = factor(Guardian))) + # upper end
geom_point(x = 0.501, y = boxData$y.middle[1], color = colors[1]) +
# Update visuals and legend of properties
scale_fill_manual(
name = "Guardian",
values = colors,
labels = guardians) +
scale_color_manual(
guide = "none",
values = colors) +
theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10),
legend.background = element_rect(
size = 0.5, linetype = "solid",
color = "grey"))
ggplot() + ggtitle("Confidence over immersion plot") +
# Make lines between participant points
geom_segment(data = participantData,
aes(x = Confidence1, y = Immersion1, xend = Confidence2, yend = Immersion2),
size = .5, color = "grey", show.legend = TRUE) +
# Make points and mean
geom_point(data = IOM,
aes(x = Confidence, y = Immersion,
color = factor(Guardian), fill = factor(Guardian),
shape = factor(Data)), size = 2, stroke = 1.5, alpha = .7) +
# Make first Trial of each participant points
geom_point(data = participantData,
aes(x = Confidence1, y = Immersion1),
size = 2, pch = 21, alpha = .7) +
# Make first Trial of each participant points
geom_point(data = guardianMeans,
aes(x = Confidence, y = Immersion, color=factor(Guardian)),
size = 5, pch = 4, alpha = 1, stroke = 2) +
# Update visuals and legend of properties
scale_fill_manual(
values = colors,
guide = "none") +
scale_color_manual(
name = "Guardian",
values = colors,
labels = guardians) +
scale_shape_manual(
name = "Data type",
values = c(16, 21, 4),
labels = c("Trial", "First", "Mean")) +
scale_linetype_manual(
name = "Participant",
values = c("Connection" = 1)) +
# Update x- and y-axis properties
xlab("Confidence [μ(|x, y| * w])") + ylab("Immersion [μ]") +
scale_x_continuous(
breaks = seq(.1, .6, by = .05),
limits = c(.1, .6)) +
scale_y_continuous(
breaks = seq(1, 7, by = .5),
limits = c(1, 7)) +
# Update legend properties
theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10),
legend.background = element_rect(
size = 0.5, linetype = "solid",
color = "grey"))
ggplot() + ggtitle("Confidence over immersion plot") +
# Make lines between participant points
geom_segment(data = participantData,
aes(x = Confidence1, y = Immersion1, xend = Confidence2, yend = Immersion2),
size = .5, color = "grey", show.legend = TRUE) +
# Make points and mean
geom_point(data = IOM,
aes(x = Confidence, y = Immersion,
color = factor(Guardian), fill = factor(Guardian),
shape = factor(Data)), size = 2, stroke = 1.5, alpha = .7) +
# Make first Trial of each participant points
geom_point(data = participantData,
aes(x = Confidence1, y = Immersion1),
size = 2, pch = 21, alpha = .7) +
# Make first Trial of each participant points
geom_point(data = guardianMeans,
aes(x = Confidence, y = Immersion, color=factor(Guardian)),
size = 5, pch = 4, alpha = 1, stroke = 2) +
# Update visuals and legend of properties
scale_fill_manual(
values = colors,
guide = "none") +
scale_color_manual(
name = "Guardian",
values = colors,
labels = guardians) +
scale_shape_manual(
name = "Data type",
values = c(16, 21, 4),
labels = c("Trial", "First", "Mean")) +
scale_linetype_manual(
name = "Participant",
values = c("Connection" = 1)) +
# Update x- and y-axis properties
xlab("Confidence [μ(|x, y| * w])") + ylab("Immersion [μ]") +
scale_x_continuous(
breaks = seq(.1, .6, by = .05),
limits = c(.1, .6)) +
scale_y_continuous(
breaks = seq(1, 7, by = .5),
limits = c(1, 7)) +
# Update legend properties
theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10),
legend.background = element_rect(
size = 0.5, linetype = "solid",
color = "grey"))
# 2D box plot
ggplot(data=boxData) + ggtitle("Confidence over immersion box-plot") +
xlab("Confidence [μ(|x,y| * w])") + ylab("Immersion [μ]") +
scale_x_continuous(
breaks = seq(.1, .6, by = .05),
limits = c(.1, .6)) +
scale_y_continuous(
breaks = seq(1, 7, by = 1),
limits = c(1, 7)) +
# 2D box defined by the Q1 & Q3 values in each dimension, with outline
geom_rect(aes(
xmin = x.lower, xmax = x.upper,
ymin = y.lower, ymax = y.upper,
fill = factor(Guardian)), color = "black", alpha = .5) +
# Whiskers for x-axis dimension with ends
geom_segment(aes(x = x.min, y = y.middle, xend = x.max, yend = y.middle, color = factor(Guardian))) + # whiskers
geom_segment(aes(x = x.min, y = y.lower, xend = x.min, yend = y.upper, color = factor(Guardian))) + # lower end
geom_segment(aes(x = x.max, y = y.lower, xend = x.max, yend = y.upper, color = factor(Guardian))) + # upper end
# Whiskers for y-axis dimension with ends
geom_segment(aes(x = x.middle, y = y.min, xend = x.middle, yend = y.max, color = factor(Guardian))) + # whiskers
geom_segment(aes(x = x.lower, y = y.min, xend = x.upper, yend = y.min, color = factor(Guardian))) + # lower end
geom_segment(aes(x = x.lower, y = y.max, xend = x.upper, yend = y.max, color = factor(Guardian))) + # upper end
geom_point(x = 0.501, y = boxData$y.middle[1], color = colors[1]) +
# Update visuals and legend of properties
scale_fill_manual(
name = "Guardian",
values = colors,
labels = guardians) +
scale_color_manual(
guide = "none",
values = colors) +
theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10),
legend.background = element_rect(
size = 0.5, linetype = "solid",
color = "grey"))
# Relative average speed by VR experience
ggplot(participantData, aes(x = DeltaSpeed, y = factor(Experience))) + ggtitle("Relative average speed by VR experience") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("Virtual Reality Experience [sessions]") + xlab("Relative Speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("1-5", "5-14", "15+"))
# Relative confidence by VR experience
ggplot(participantData, aes(x = DeltaConfidence, y = factor(Experience))) + ggtitle("Relative confidence by VR experience") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .5) +
ylab("Virtual Reality Experience [sessions]") + xlab("Relative confidence [Pμ/Mμ]") +
scale_y_discrete(labels=c("1-5", "5-14", "15+"))
# Time taken completing task
ggplot(IOM, aes(x = Time, y = factor(Guardian))) + ggtitle("Time taken completing task") +
geom_boxplot() +
ylab("Guardian") + xlab("Time [s]") +
scale_y_discrete(labels=c("Perma", "Meta"))
# Absolute relative confidence score
ggplot(participantData, aes(x = DeltaConfidence)) + ggtitle("Absolute relative confidence") +
geom_histogram(color = "black", fill = "white", bins = 20) +
geom_density(alpha = .2, fill = "black") +
geom_boxplot(aes(y = -.5)) +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .9) +
scale_x_continuous(breaks = seq(-2, 6, by = .1)) +
ylab("Frequency") + xlab("Absolute relative confidence [Pμ/Mμ]")
median(participantData$DeltaConfidence)
# Relative confidence
ggplot(participantData, aes(x = DeltaConfidence, y = "")) + ggtitle("Relative confidence score") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("") + xlab("Relative confidence [Pμ/Mμ]") +
scale_y_discrete(labels=c(""))
# Absolute relative average speed
ggplot(participantData, aes(x = DeltaSpeed)) + ggtitle("Absolute relative average speed") +
geom_histogram(color = "black", fill = "white", bins = 20) +
geom_density(alpha = .2, fill = "black") +
geom_boxplot(aes(y = -.5)) +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .9) +
scale_x_continuous(breaks = seq(-2, 6, by = .05)) +
ylab("Frequency") + xlab("Absolute relative confidence [Pμ/Mμ]")
# Relative average speed
ggplot(participantData, aes(x = DeltaSpeed, y = "")) + ggtitle("Relative average speed") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("") + xlab("Relative speed [Pμ/Mμ]") +
scale_y_discrete(labels=c(""))
median(participantData$DeltaSpeed)
# Plot user experience from survey
par(mfrow=c(1, 3)) # Enable 3 plots along x-axis
ggplot() + ggtitle("Confidence over immersion plot") +
# Make lines between participant points
geom_segment(data = participantData,
aes(x = Confidence1, y = Immersion1, xend = Confidence2, yend = Immersion2),
size = .5, color = "grey", show.legend = TRUE) +
# Make points and mean
geom_point(data = IOM,
aes(x = Confidence, y = Immersion,
color = factor(Guardian), fill = factor(Guardian),
shape = factor(Data)), size = 2, stroke = 1.5, alpha = .7) +
# Make first Trial of each participant points
geom_point(data = participantData,
aes(x = Confidence1, y = Immersion1),
size = 2, pch = 21, alpha = .7) +
# Make first Trial of each participant points
geom_point(data = guardianMeans,
aes(x = Confidence, y = Immersion, color=factor(Guardian)),
size = 5, pch = 4, alpha = 1, stroke = 2) +
# Update visuals and legend of properties
scale_fill_manual(
values = colors,
guide = "none") +
scale_color_manual(
name = "Guardian",
values = colors,
labels = guardians) +
scale_shape_manual(
name = "Data type",
values = c(16, 21, 4),
labels = c("Trial", "First", "Mean")) +
scale_linetype_manual(
name = "Participant",
values = c("Connection" = 1)) +
# Update x- and y-axis properties
xlab("Confidence [μ(|x, y| * w])") + ylab("Immersion [μ]") +
scale_x_continuous(
breaks = seq(.1, .6, by = .05),
limits = c(.1, .6)) +
scale_y_continuous(
breaks = seq(1, 7, by = .5),
limits = c(1, 7)) +
# Update legend properties
theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10),
legend.background = element_rect(
size = 0.5, linetype = "solid",
color = "grey"))
boxData
# 2D box plot
ggplot(data=boxData) + ggtitle("Confidence over immersion box-plot") +
xlab("Confidence [μ(|x,y| * w])") + ylab("Immersion [μ]") +
scale_x_continuous(
breaks = seq(.1, .6, by = .05),
limits = c(.1, .6)) +
scale_y_continuous(
breaks = seq(1, 7, by = 1),
limits = c(1, 7)) +
# 2D box defined by the Q1 & Q3 values in each dimension, with outline
geom_rect(aes(
xmin = x.lower, xmax = x.upper,
ymin = y.lower, ymax = y.upper,
fill = factor(Guardian)), color = "black", alpha = .5) +
# Whiskers for x-axis dimension with ends
geom_segment(aes(x = x.min, y = y.middle, xend = x.max, yend = y.middle, color = factor(Guardian))) + # whiskers
geom_segment(aes(x = x.min, y = y.lower, xend = x.min, yend = y.upper, color = factor(Guardian))) + # lower end
geom_segment(aes(x = x.max, y = y.lower, xend = x.max, yend = y.upper, color = factor(Guardian))) + # upper end
# Whiskers for y-axis dimension with ends
geom_segment(aes(x = x.middle, y = y.min, xend = x.middle, yend = y.max, color = factor(Guardian))) + # whiskers
geom_segment(aes(x = x.lower, y = y.min, xend = x.upper, yend = y.min, color = factor(Guardian))) + # lower end
geom_segment(aes(x = x.lower, y = y.max, xend = x.upper, yend = y.max, color = factor(Guardian))) + # upper end
geom_point(x = 0.501, y = boxData$y.middle[1], color = colors[1]) +
# Update visuals and legend of properties
scale_fill_manual(
name = "Guardian",
values = colors,
labels = guardians) +
scale_color_manual(
guide = "none",
values = colors) +
theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10),
legend.background = element_rect(
size = 0.5, linetype = "solid",
color = "grey"))
ggplot() + ggtitle("Confidence over immersion plot") +
# Make lines between participant points
geom_segment(data = participantData,
aes(x = Confidence1, y = Immersion1, xend = Confidence2, yend = Immersion2),
size = .5, color = "grey", show.legend = TRUE) +
# Make points and mean
geom_point(data = IOM,
aes(x = Confidence, y = Immersion,
color = factor(Guardian), fill = factor(Guardian),
shape = factor(Data)), size = 2, stroke = 1.5, alpha = .7) +
# Make first Trial of each participant points
geom_point(data = participantData,
aes(x = Confidence1, y = Immersion1),
size = 2, pch = 21, alpha = .7) +
# Make first Trial of each participant points
geom_point(data = guardianMeans,
aes(x = Confidence, y = Immersion, color=factor(Guardian)),
size = 5, pch = 4, alpha = 1, stroke = 2) +
# Update visuals and legend of properties
scale_fill_manual(
values = colors,
guide = "none") +
scale_color_manual(
name = "Guardian",
values = colors,
labels = guardians) +
scale_shape_manual(
name = "Data type",
values = c(16, 21, 4),
labels = c("Trial", "First", "Mean")) +
scale_linetype_manual(
name = "Participant",
values = c("Connection" = 1)) +
# Update x- and y-axis properties
xlab("Confidence [μ(|x, y| * w])") + ylab("Immersion [μ]") +
scale_x_continuous(
breaks = seq(.1, .6, by = .05),
limits = c(.1, .6)) +
scale_y_continuous(
breaks = seq(1, 7, by = .5),
limits = c(1, 7)) +
# Update legend properties
theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10),
legend.background = element_rect(
size = 0.5, linetype = "solid",
color = "grey"))
# 2D box plot
ggplot(data=boxData) + ggtitle("Confidence over immersion box-plot") +
xlab("Confidence [μ(|x,y| * w])") + ylab("Immersion [μ]") +
scale_x_continuous(
breaks = seq(.1, .6, by = .05),
limits = c(.1, .6)) +
scale_y_continuous(
breaks = seq(1, 7, by = 1),
limits = c(1, 7)) +
# 2D box defined by the Q1 & Q3 values in each dimension, with outline
geom_rect(aes(
xmin = x.lower, xmax = x.upper,
ymin = y.lower, ymax = y.upper,
fill = factor(Guardian)), color = "black", alpha = .5) +
# Whiskers for x-axis dimension with ends
geom_segment(aes(x = x.min, y = y.middle, xend = x.max, yend = y.middle, color = factor(Guardian))) + # whiskers
geom_segment(aes(x = x.min, y = y.lower, xend = x.min, yend = y.upper, color = factor(Guardian))) + # lower end
geom_segment(aes(x = x.max, y = y.lower, xend = x.max, yend = y.upper, color = factor(Guardian))) + # upper end
# Whiskers for y-axis dimension with ends
geom_segment(aes(x = x.middle, y = y.min, xend = x.middle, yend = y.max, color = factor(Guardian))) + # whiskers
geom_segment(aes(x = x.lower, y = y.min, xend = x.upper, yend = y.min, color = factor(Guardian))) + # lower end
geom_segment(aes(x = x.lower, y = y.max, xend = x.upper, yend = y.max, color = factor(Guardian))) + # upper end
geom_point(x = 0.501, y = boxData$y.middle[1], color = colors[1]) +
# Update visuals and legend of properties
scale_fill_manual(
name = "Guardian",
values = colors,
labels = guardians) +
scale_color_manual(
guide = "none",
values = colors) +
theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 10),
legend.background = element_rect(
size = 0.5, linetype = "solid",
color = "grey"))
boxData
# Relative average speed by VR experience
ggplot(participantData, aes(x = DeltaSpeed, y = factor(Experience))) + ggtitle("Relative average speed by VR experience") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("Virtual Reality Experience [sessions]") + xlab("Relative Speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("1-5", "5-14", "15+"))
median(participantData$DeltaSpeed)
participantData$DeltaSpeed
subset(participantData$Experience == 2, select = c(DeltaSpeed))
subset(participantData, Experience == 2, select = c(DeltaSpeed))
median(subset(participantData, Experience == 2, select = c(DeltaSpeed)))
median(subset(participantData, Experience == 2, select = c(DeltaSpeed))$DeltaSpeed)
median(subset(participantData, Experience == 2, select = c(DeltaSpeed))$DeltaSpeed)
median(subset(participantData, Experience == 3, select = c(DeltaSpeed))$DeltaSpeed)
median(subset(participantData, Experience == 4, select = c(DeltaSpeed))$DeltaSpeed)
# Relative average speed
ggplot(participantData, aes(x = DeltaSpeed, y = "")) + ggtitle("Relative average speed") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("") + xlab("Relative speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("")) +
scale_x_continuous(breaks = seq(.8, 1.3, by = .05)) +
median(participantData$DeltaSpeed)
# Relative average speed
ggplot(participantData, aes(x = DeltaSpeed, y = "")) + ggtitle("Relative average speed") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("") + xlab("Relative speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("")) +
scale_x_continuous(breaks = seq(.8, 1.3, by = .05))
# Relative average speed
ggplot(participantData, aes(x = DeltaSpeed, y = "")) + ggtitle("Relative average speed") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("") + xlab("Relative speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("")) +
scale_x_continuous(breaks = seq(.8, 1.3, by = .05))
# Relative average speed by VR experience
ggplot(participantData, aes(x = DeltaSpeed, y = factor(Experience))) + ggtitle("Relative average speed by VR experience") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("Virtual Reality Experience [sessions]") + xlab("Relative Speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("1-5", "5-14", "15+"))
# Relative average speed by VR experience
ggplot(participantData, aes(x = DeltaSpeed, y = factor(Experience))) + ggtitle("Relative average speed by VR experience") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("Virtual Reality Experience [sessions]") + xlab("Relative Speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("1-5", "5-14", "15+")) +
scale_x_continuous(breaks = seq(.8, 1.3, by = .05))
# Relative average speed by VR experience
ggplot(participantData, aes(x = DeltaSpeed, y = factor(Experience))) + ggtitle("Relative average speed by VR experience") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("Virtual Reality Experience [sessions]") + xlab("Relative Speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("1-5", "5-14", "15+")) +
scale_x_continuous(breaks = seq(.8, 1.3, by = .01))
# Relative average speed by VR experience
ggplot(participantData, aes(x = DeltaSpeed, y = factor(Experience))) + ggtitle("Relative average speed by VR experience") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("Virtual Reality Experience [sessions]") + xlab("Relative Speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("1-5", "5-14", "15+")) +
scale_x_continuous(breaks = seq(.8, 1.3, by = .02))
# Relative average speed by VR experience
ggplot(participantData, aes(x = DeltaSpeed, y = factor(Experience))) + ggtitle("Relative average speed by VR experience") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("Virtual Reality Experience [sessions]") + xlab("Relative Speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("1-5", "5-14", "15+")) +
scale_x_continuous(breaks = seq(.8, 1.3, by = .025))
# Relative average speed by VR experience
ggplot(participantData, aes(x = DeltaSpeed, y = factor(Experience))) + ggtitle("Relative average speed by VR experience") +
geom_boxplot() +
geom_vline(aes(xintercept = 1), color = "red", linetype = "dashed", size = .8) +
ylab("Virtual Reality Experience [sessions]") + xlab("Relative Speed [Pμ/Mμ]") +
scale_y_discrete(labels=c("1-5", "5-14", "15+")) +
scale_x_continuous(breaks = seq(.8, 1.3, by = .05))
# Plot user experience from survey
par(mfrow=c(1, 3)) # Enable 3 plots along x-axis
hist(UXsurveyData$Usefull, breaks = 5, main = "Usefull", ylim = c(0, 14), xlab = "Perma                                         Meta")
hist(UXsurveyData$Helpfull, breaks = 5, main = "Helpfull", ylim = c(0, 14), xlab = "Perma                                         Meta")
hist(UXsurveyData$Comfortable, breaks = 5, main = "Comfortable", ylim = c(0, 14), xlab = "Perma                                         Meta")
par(mfrow=c(1, 1)) # Disable multiple plots
# Plot user experience from survey
par(mfrow=c(1, 3)) # Enable 3 plots along x-axis
hist(UXsurveyData$Usefull, breaks = 6, main = "Usefull", ylim = c(0, 14), xlab = "Perma                                         Meta")
hist(UXsurveyData$Helpfull, breaks = 6, main = "Helpfull", ylim = c(0, 14), xlab = "Perma                                         Meta")
hist(UXsurveyData$Comfortable, breaks = 6, main = "Comfortable", ylim = c(0, 14), xlab = "Perma                                         Meta")
par(mfrow=c(1, 1)) # Disable multiple plots
